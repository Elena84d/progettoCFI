import axios from 'axios';
import React__default, { forwardRef, useImperativeHandle, useState, useRef, useCallback, useEffect, createElement } from 'react';
import { AnimateSharedLayout, AnimatePresence, motion } from 'framer-motion';
import { ZoomIn, ZoomOut, Download, FullscreenExit, Fullscreen, GridFill, Search, PauseCircleFill, PlayCircleFill, XLg } from 'react-bootstrap-icons';
import Magnifier from 'react-magnifier';
import { Portal } from 'react-portal';
import { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch';
import { saveAs } from 'file-saver';
import Div100vh from 'react-div-100vh';
import KeyHandler from 'react-key-handler';
import { useInterval } from 'usehooks-ts';
import useEmblaCarousel from 'embla-carousel-react';
import YouTube from 'react-youtube';
import useResizeObserver from '@react-hook/resize-observer';

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

var styles = {"lightboxjs":"_30i9K","slideshowContainer":"_3kSzL","slideshowBtn":"_tCjNO","closeIcon":"_2IJEr","iconsHeader":"_2Yv4j","prev1":"_1lgEi","next1":"_DDceb","icon":"_2Vept","prevIcon":"_2gxOL","nextIcon":"_3gp2w","show":"_2crlL","displayHidden":"_34QvR","thumbnail":"_1R214","hoverShadow":"_3EuZy","thumbnails":"_3pfLz","thumbnailsWithCaption":"_Fp_rP","imageSlide":"_22ETc","thumbnailsOuterContainer":"_-wN_b","videoThumbnailsOuterContainer":"_KbOLW","imgTitleContainer":"_1j-pZ","thumbnailsAndCaption":"_1nxK_","htmlVideoOuterContainer":"_z-jNd","caption":"_2jJU2","galleryImg":"_lY1R_","slideshowAnimContainer":"_wTR3b","fullScreenContainer":"_11N04","imageInnerContainer":"_20Hp6","magnifyWrapper":"_3PObS","slideshowInnerContainer":"_1JRT_","slideshowInnerVideoContainer":"_1ni2w","slideshowInnerContainerThumbnails":"_GV0NM","lightboxContainer":"_3BNPD","slideshowAnimImg":"_j1nqC","controls":"_ABXHD","ytVideo":"_2eq8V","videoOuterContainer":"_1P3Wc","videoIconsHeader":"_qtY0U","lightbox":"_3cxVN","imgTitle":"_2pA2G","lightbox_img":"_3A0RO","slideshow_img_fullscreen":"_2yYOi","slideshowInnerContainerFullScreen":"_hWNoE","fullScreenLightboxImg":"_1ek8k","opacity-fade":"_2P48G","imageSliderThumbnails":"_1xBL9","slideshow_img":"_1yWyS","light_icon":"_1kIQ4","dark_icon":"_1qbJe","light_header_icon":"_3DIHj","dark_header_icon":"_11aT5","magnifier-image":"_mdJQi","active":"_3sodH","inactiveThumbnailBorder":"_3bkUp","embla_thumbs":"_32vVi","htmlVideo":"_sqvn-","react-transform-component":"_3Id1-","loader":"_3qqrl","rotation":"_1hUzk","day_loader":"_1itZw","night_loader":"_2TI_i","closeButton":"_2kumA","slideImageAndCaption":"_238y5","roundedBorder":"_2FvXV","maxWidthFull":"_oa5b0","maxWidthWithoutMagnifier":"_z-bHV","lightboxVideo":"_hGbhv","navigation-wrapper":"_1dVqh","dots":"_3MuXE","dot":"_3U2py","arrow":"_35l6Q","leftArrow":"_1I4Zg","rightArrow":"_1lqBv","arrow--disabled":"_37Xda","navDotsMargin":"_1LtID","inactiveThumbnailBorderImgSlider":"_2y9OU","ytVideoImgSlider":"_2oAIc","outerYTVideoImgSlider":"_2-c5L","imgSliderArrow":"_1Bey-","cursorPointer":"_3xuz3","lightboxjs_icon":"_1fpgA","embla":"_1cifY","embla__viewport":"_1mBUR","embla__container":"_Bqct9","embla__slide":"_1eJNe","embla_thumbs__viewport":"_1tmVU","embla_thumbs__container":"_3-Y1e","embla_thumbs__slide":"_jp0uN","embla_thumbs__slide__img":"_3S-ie","mlAuto":"_1afvv"};

var wrapNums = function wrapNums(minNum, maxNum, v) {
  var rangeSize = maxNum - minNum;
  return ((v - minNum) % rangeSize + rangeSize) % rangeSize + minNum;
};
var shouldAutoplay = function shouldAutoplay(elem) {
  if (elem.type == 'yt' && elem.autoPlay != true && elem.autoPlay != 'true') {
    return false;
  } else if (elem.autoPlay == false || elem.autoPlay == 'false') {
    return false;
  }
  return true;
};
var getVideoHeight = function getVideoHeight(elem) {
  if (elem.videoHeight) {
    return elem.videoHeight;
  }
  return "200";
};
var getVideoWidth = function getVideoWidth(elem) {
  if (elem.videoWidth) {
    return elem.videoWidth;
  }
  return "900";
};

var thumbnailVariants = {
  visible: {
    opacity: 1,
    y: 0
  },
  hidden: {
    opacity: 0,
    y: 100
  }
};
var themes = {
  day: {
    background: 'white',
    iconColor: 'black',
    thumbnailBorder: 'solid transparent 2px',
    textColor: 'black'
  },
  night: {
    background: '#151515',
    iconColor: '#626b77',
    thumbnailBorder: 'solid rgb(107, 133, 206)  2px',
    textColor: '#626b77'
  },
  lightbox: {
    background: 'rgba(12, 12, 12, 0.93)',
    iconColor: '#626b77',
    thumbnailBorder: 'solid rgb(107, 133, 206) 2px',
    textColor: 'silver'
  }
};
var inactiveThumbnailBorder = 'solid transparent 2px';
var defaultTheme = 'night';
var mobileWidth = 768;
var SlideshowLightbox = forwardRef(function (props, ref) {
  useImperativeHandle(ref, function () {
    return {
      reset: function reset() {
        initImages(true, true);
      }
    };
  });
  var createCustomThumbnailBorder = function createCustomThumbnailBorder() {
    if (props.thumbnailBorder) {
      return "solid " + props.thumbnailBorder + " 2px";
    }
  };
  var _useState = useState([0, 0]),
    _useState$ = _useState[0],
    imgSlideIndex = _useState$[0],
    direction = _useState$[1],
    setImgSlideIndex = _useState[1];
  var _useState2 = useState(false),
    showModal = _useState2[0],
    setShowModal = _useState2[1];
  var _useState3 = useState(false),
    isSlideshowPlaying = _useState3[0],
    setIsSlideshowPlaying = _useState3[1];
  var _useState4 = useState(false),
    emblaReinitialized = _useState4[0],
    setEmblaReinitialized = _useState4[1];
  var _useState5 = useState([]),
    images = _useState5[0],
    setImages = _useState5[1];
  var _useState6 = useState([]),
    previewImageElems = _useState6[0],
    setPreviewImageElems = _useState6[1];
  var slideIndex = wrapNums(0, images.length, imgSlideIndex);
  var _useState7 = useState({
      loop: true,
      startIndex: 0,
      active: true
    }),
    reactSwipeOptions = _useState7[0],
    setReactSwipeOptions = _useState7[1];
  var initialThumbnailOptions = {
    startIndex: 0,
    containScroll: 'keepSnaps',
    dragFree: true
  };
  var _useState8 = useState(initialThumbnailOptions),
    thumbnailSwipeOptions = _useState8[0],
    setThumbnailSwipeOptions = _useState8[1];
  var _useState9 = useState(false),
    carouselReady = _useState9[0],
    setCarouselReady = _useState9[1];
  var _useState10 = useState(false),
    zoomedIn = _useState10[0],
    setZoomedIn = _useState10[1];
  var _useState11 = useState(false),
    isOpen = _useState11[0],
    setIsOpen = _useState11[1];
  var _useState12 = useState(null),
    prevFocusedElem = _useState12[0],
    setPrevFocusedElem = _useState12[1];
  var _useState13 = useState(false),
    animationEntered = _useState13[0],
    setAnimationEntered = _useState13[1];
  var _useState14 = useState(props.magnifyingGlass ? props.magnifyingGlass : false),
    magnifyingGlassFeature = _useState14[0];
  var _useState15 = useState(props.disableImageZoom ? props.disableImageZoom : false),
    disableZoom = _useState15[0],
    setDisableZoom = _useState15[1];
  var _useState16 = useState(props.slideshowInterval ? props.slideshowInterval : 1700),
    slideshowInterval = _useState16[0];
  var _useState17 = useState(props.rightArrowStyle ? props.rightArrowStyle : {}),
    rightArrowStyle = _useState17[0];
  var _useState18 = useState(props.leftArrowStyle ? props.leftArrowStyle : {}),
    leftArrowStyle = _useState18[0];
  var _useState19 = useState(props.roundedImages ? props.roundedImages : false),
    isRounded = _useState19[0],
    setIsRounded = _useState19[1];
  var _useState20 = useState(props.showControls ? props.showControls : true),
    showControls = _useState20[0],
    setShowControls = _useState20[1];
  var _useState21 = useState(props.showFullScreenIcon ? props.showFullScreenIcon : true),
    displayFullScreenIcon = _useState21[0],
    setDisplayFullScreenIcon = _useState21[1];
  var _useState22 = useState(props.showThumbnailIcon ? props.showThumbnailIcon : true),
    displayThumbnailIcon = _useState22[0],
    setDisplayThumbnailIcon = _useState22[1];
  var _useState23 = useState(props.showSlideshowIcon ? props.showSlideshowIcon : true),
    setDisplaySlideshowIcon = _useState23[1];
  var _useState24 = useState(props.showMagnificationIcons ? props.showMagnificationIcons : true),
    displayMagnificationIcons = _useState24[0],
    setDisplayMagnificationIcons = _useState24[1];
  var _useState25 = useState(props.nextArrow ? props.nextArrow : null),
    nextArrowElem = _useState25[0];
  var _useState26 = useState(props.imageComponent ? props.imageComponent : null),
    isImageComponent = _useState26[0];
  var _useState27 = useState(props.prevArrow ? props.prevArrow : null),
    prevArrowElem = _useState27[0];
  var _useState28 = useState(props.modalClose ? props.modalClose : "default"),
    modalCloseOption = _useState28[0];
  var _useState29 = useState(props.downloadImages ? props.downloadImages : false),
    showDownloadBtn = _useState29[0];
  var _useState30 = useState(props.rtl ? props.rtl : false),
    isRTL = _useState30[0];
  var _useState31 = useState(props.framework ? props.framework : ''),
    frameworkID = _useState31[0];
  var _useState32 = useState(props.lightboxIdentifier ? props.lightboxIdentifier : false),
    lightboxIdentifier = _useState32[0];
  var _useState33 = useState(props.fullScreen ? props.fullScreen : false),
    imageFullScreen = _useState33[0];
  var _useState34 = useState(props.licenseKey ? props.licenseKey : '');
  var _useState35 = useState(props.showLoader ? props.showLoader : false),
    displayLoader = _useState35[0],
    setDisplayLoader = _useState35[1];
  var _useState36 = useState(props.backgroundColor ? props.backgroundColor : themes[defaultTheme].background),
    backgroundColor = _useState36[0],
    setBackgroundColor = _useState36[1];
  var _useState37 = useState(props.iconColor ? props.iconColor : null),
    iconColor = _useState37[0],
    setIconColor = _useState37[1];
  var _useState38 = useState(props.textColor ? props.textColor : themes[defaultTheme].textColor),
    textColor = _useState38[0],
    setTextColor = _useState38[1];
  var _useState39 = useState(props.useCoverMode ? props.useCoverMode : false),
    coverMode = _useState39[0];
  var _useState40 = useState(props.thumbnailBorder ? createCustomThumbnailBorder() : themes[defaultTheme].thumbnailBorder),
    thumbnailBorder = _useState40[0];
  var _useState41 = useState(props.showThumbnails ? props.showThumbnails : false),
    showThumbnails = _useState41[0],
    setShowThumbnails = _useState41[1];
  var _useState42 = useState(props.animateThumbnails ? props.animateThumbnails : true),
    animatedThumbnails = _useState42[0];
  var _useState43 = useState(props.imgAnimation ? props.imgAnimation : 'imgDrag'),
    setImgAnimation = _useState43[1];
  var _useState44 = useState(props.arrowStyle ? props.arrowStyle : 'dark'),
    arrowStyle = _useState44[0];
  var _useState45 = useState(false),
    setYTVideoCurrentlyPlaying = _useState45[1];
  var _useState46 = useState(0),
    width = _useState46[0],
    setWidth = _useState46[1];
  var _useState47 = useState(false),
    isBrowserFullScreen = _useState47[0],
    setIsBrowserFullScreen = _useState47[1];
  var _useState48 = useState(false),
    enableMagnifyingGlass = _useState48[0],
    setMagnifyingGlass = _useState48[1];
  var _useState49 = useState(false),
    imagesLoaded = _useState49[0],
    setImagesLoaded = _useState49[1];
  var imageRef = useRef(null);
  var _useState50 = useState(0),
    zoomIdx = _useState50[0],
    setZoomIdx = _useState50[1];
  var _useState51 = useState(500),
    imgContainHeight = _useState51[0],
    setImgContainHeight = _useState51[1];
  var _useState52 = useState(426),
    imgContainWidth = _useState52[0],
    setImgContainWidth = _useState52[1];
  var _useState53 = useState(false),
    isInit = _useState53[0],
    setIsInit = _useState53[1];
  var zoomReferences = useRef([]);
  var videoReferences = useRef({});
  var btnRef = useRef(null);
  var _useState54 = useState({}),
    videoElements = _useState54[0],
    setVideoElements = _useState54[1];
  var isMobile = width <= mobileWidth;
  var getLoaderThemeClass = function getLoaderThemeClass() {
    if (props.theme) {
      if (props.theme == 'night' || props.theme == 'lightbox') {
        return styles.night_loader;
      } else if (props.theme == 'day') {
        return styles.day_loader;
      }
    }
    return styles.night_loader;
  };
  var _useEmblaCarousel = useEmblaCarousel(reactSwipeOptions),
    emblaRef = _useEmblaCarousel[0],
    emblaApi = _useEmblaCarousel[1];
  var _useEmblaCarousel2 = useEmblaCarousel(thumbnailSwipeOptions),
    emblaThumbsRef = _useEmblaCarousel2[0],
    emblaThumbsApi = _useEmblaCarousel2[1];
  var scrollPrev = useCallback(function () {
    if (emblaApi) {
      emblaApi.scrollPrev();
    }
  }, [emblaApi]);
  var scrollNext = useCallback(function () {
    if (emblaApi) emblaApi.scrollNext();
  }, [emblaApi]);
  var variants = {
    active: {
      opacity: 1
    },
    inactive: {
      opacity: 0
    }
  };
  var isImageCaption = function isImageCaption() {
    if (props.images && props.images[slideIndex].caption) {
      return true;
    }
    return false;
  };
  var displayDownloadBtn = function displayDownloadBtn() {
    if (isVideo(slideIndex)) {
      return false;
    } else {
      return showDownloadBtn;
    }
  };
  function handleWindowResize() {
    setWidth(window.innerWidth);
  }
  var shouldDisplayMagnifyingGlassIcon = function shouldDisplayMagnifyingGlassIcon() {
    if (isVideo(slideIndex)) {
      return false;
    }
    if (isMobile == true) {
      return false;
    }
    if (imageFullScreen == true) {
      return false;
    }
    if (magnifyingGlassFeature == true) {
      return true;
    }
    return false;
  };
  var getImageStyle = function getImageStyle() {
    var styleObject = {};
    if (isRounded) {
      styleObject["borderRadius"] = "20px";
    }
    if (modalCloseOption == "clickOutside") {
      styleObject["pointerEvents"] = "auto";
    }
    if (isImageComponent && showThumbnails == false && !isMobile) {
      styleObject["height"] = "85vh";
    }
    return styleObject;
  };
  var shouldDisplaySlideshowIcon = function shouldDisplaySlideshowIcon() {
    if (props.showSlideshowIcon != undefined) {
      return props.showSlideshowIcon;
    }
    if (images) {
      if (images.length == 1) {
        return false;
      }
    } else if (props.images) {
      if (props.images.length == 1) {
        return false;
      }
    }
    return true;
  };
  var thumbnailClick = function thumbnailClick(index) {
    initLoader(index);
    setCurrentSlide(index);
  };
  var checkModalClick = function checkModalClick(e) {
    var modals = document.getElementsByClassName('imageModal');
    var arr_modals = Array.from(modals);
    for (var i = 0; i < arr_modals.length; i++) {
      var elem = arr_modals[i];
      var clickInside = elem.contains(e.target);
      if (clickInside) {
        return;
      }
    }
    closeModal();
  };
  var getRTLIndex = function getRTLIndex(img_gallery_length, i) {
    var index;
    if (i == 0) {
      index = img_gallery_length - 1;
    } else if (i == img_gallery_length - 1) {
      index = 0;
    } else {
      index = img_gallery_length - i - 1;
    }
    return index;
  };
  var fullScreen = function fullScreen() {
    var lightbox = document.getElementById('slideshowAnim');
    openFullScreen(lightbox);
    setIsBrowserFullScreen(true);
    initFullScreenChangeEventListeners();
  };
  var exitFullScreenHandler = function exitFullScreenHandler() {
    if (document['webkitIsFullScreen'] || document['mozFullScreen'] || document['msFullscreenElement']) {
      setIsBrowserFullScreen(true);
    } else {
      if (isBrowserFullScreen) {
        closeFullScreen(document);
      }
      removeFullScreenChangeEventListeners();
      setIsBrowserFullScreen(false);
    }
  };
  var exitFullScreen = function exitFullScreen() {
    closeFullScreen(document);
    removeFullScreenChangeEventListeners();
    setIsBrowserFullScreen(false);
  };
  var updateImageSlideshow = function updateImageSlideshow(newDirection) {
    if (isRTL) {
      scrollPrev();
    } else {
      scrollNext();
    }
    setImgSlideIndex([imgSlideIndex + newDirection, newDirection]);
    if (isRTL) {
      setZoomIdx(zoomIdx - 1 < 0 ? images.length - 1 : zoomIdx - 1);
    } else {
      setZoomIdx(zoomIdx + 1 >= images.length ? 0 : zoomIdx + 1);
    }
  };
  var displayArrows = function displayArrows() {
    if (props.showArrows == false) {
      return false;
    } else if (images.length == 1) {
      return false;
    }
    if (props.images) {
      if (props.images.length == 1) {
        return false;
      }
    }
    return true;
  };
  var initLoader = function initLoader(newIndex) {
    if (props.showLoader && props.images) {
      if (!isVideo(newIndex) && images[newIndex].loaded != true) {
        setDisplayLoader(true);
      } else if (props.showLoader && props.images && images[newIndex]['loaded']) {
        setDisplayLoader(false);
      }
    }
  };
  var getImageCaption = function getImageCaption() {
    if (props.images) {
      return props.images[slideIndex].caption;
    }
    return "";
  };
  var getArrowStyle = function getArrowStyle() {
    if (arrowStyle == 'dark') {
      return styles.dark_icon;
    } else if (arrowStyle == 'light') {
      return styles.light_icon;
    }
  };
  var getIconStyle = function getIconStyle() {
    if (arrowStyle == 'dark') {
      return styles.dark_header_icon;
    } else if (arrowStyle == 'light') {
      return styles.light_header_icon;
    }
  };
  var setCurrentSlide = function setCurrentSlide(newIndex) {
    var newDirection;
    if (newIndex > imgSlideIndex) {
      newDirection = 1;
    } else {
      newDirection = -1;
    }
    setZoomIdx(newIndex);
    setImgSlideIndex([newIndex, newDirection]);
    if (emblaApi) {
      emblaApi.scrollTo(newIndex);
    }
  };
  var dispatchOpenEvent = function dispatchOpenEvent() {
    if (props.onOpen) {
      props.onOpen(slideIndex, images[slideIndex]);
    }
  };
  var dispatchCloseEvent = function dispatchCloseEvent() {
    if (props.onClose) {
      props.onClose(slideIndex);
    }
  };
  var dispatchNextImgEvent = function dispatchNextImgEvent(newIndex) {
    if (props.onNext) {
      props.onNext(newIndex, images[newIndex]);
    }
  };
  var dispatchPrevImgEvent = function dispatchPrevImgEvent(newIndex) {
    if (props.onPrev) {
      props.onPrev(newIndex, images[newIndex]);
    }
  };
  var closeModal = function closeModal() {
    setZoomIdx(0);
    if (isBrowserFullScreen) {
      exitFullScreen();
    }
    if (isSlideshowPlaying) {
      setIsSlideshowPlaying(false);
    }
    setShowModal(false);
    setIsOpen(false);
    setCarouselReady(false);
    setEmblaReinitialized(false);
    if (prevFocusedElem) prevFocusedElem === null || prevFocusedElem === void 0 ? void 0 : prevFocusedElem.focus();
  };
  var openModal = function openModal(num) {
    if (emblaApi) {
      emblaApi.reInit();
      if (emblaThumbsApi) {
        emblaThumbsApi === null || emblaThumbsApi === void 0 ? void 0 : emblaThumbsApi.scrollTo(emblaApi.selectedScrollSnap());
      }
    }
    setImgSlideIndex([num, 1]);
    setShowModal(true);
    setIsOpen(true);
  };
  var setItemLoaded = function setItemLoaded(index) {
    if (props.images) {
      setImages(function (images) {
        return images.map(function (img, i) {
          return index === i ? _extends({}, img, {
            loaded: true
          }) : img;
        });
      });
    }
  };
  var setImagesItemLoaded = function setImagesItemLoaded(index) {
    setImages(function (images) {
      return images.map(function (img, i) {
        return index === i ? _extends({}, img, {
          loaded: true
        }) : img;
      });
    });
  };
  var resetMedia = function resetMedia(slide_index) {
    resetVideo(slide_index);
    resetImage();
  };
  var initSlide = function initSlide(newSlideIndex) {
    setImgSlideIndex([newSlideIndex, 1]);
    var wrap_slide_index = wrapNums(0, images.length, newSlideIndex);
    setZoomIdx(wrap_slide_index);
    initLoader(wrap_slide_index);
  };
  var nextSlide = function nextSlide() {
    scrollNext();
    initSlide(imgSlideIndex + 1);
  };
  var prevSlide = function prevSlide() {
    scrollPrev();
    initSlide(imgSlideIndex - 1);
  };
  var setThumbnailStartIndex = function setThumbnailStartIndex(index) {
    var thumbnailSwipeOptionConfig = thumbnailSwipeOptions;
    thumbnailSwipeOptionConfig.startIndex = index;
    setThumbnailSwipeOptions(thumbnailSwipeOptionConfig);
  };
  var openModalWithSlideNum = function openModalWithSlideNum(index) {
    var reactSwipeOptionConfig = reactSwipeOptions;
    reactSwipeOptionConfig.startIndex = index;
    setReactSwipeOptions(reactSwipeOptionConfig);
    setThumbnailStartIndex(index);
    setZoomIdx(index);
    openModal(index);
  };
  var saveImage = function saveImage() {
    if (props.images.length > 0) {
      if (props.images[slideIndex].original) {
        saveAs(props.images[slideIndex].original, 'image.jpg');
      } else {
        saveAs(props.images[slideIndex]['src'], 'image.jpg');
      }
    } else {
      if (images[slideIndex].src) {
        saveAs(images[slideIndex].src, 'image.jpeg');
      }
    }
  };
  var playSlideshow = function playSlideshow() {
    setMagnifyingGlass(false);
    if (isRTL) {
      updateImageSlideshow(-1);
    } else {
      updateImageSlideshow(1);
    }
    setIsSlideshowPlaying(true);
  };
  var stopSlideshow = function stopSlideshow() {
    setIsSlideshowPlaying(false);
  };
  var resetVideo = function resetVideo(slide_index) {
    if (props.images) {
      var elem = props.images[slide_index];
      if (elem) {
        if (elem.type == 'htmlVideo') {
          videoReferences.current[slide_index].pause();
        } else if (elem.type == "yt") {
          videoElements[slide_index].target.pauseVideo();
        }
      }
    }
  };
  var getImageThumbnail = function getImageThumbnail(img, index, isNextJS) {
    return createElement("div", {
      key: "thumbnail_slide_" + index,
      className: "" + styles.embla_thumbs__slide
    }, createElement("img", {
      className: styles.thumbnail + " imageModal",
      src: isNextJS == true ? getThumbnailImgSrcNext(img, index) : getThumbnailImgSrc(img, index),
      alt: img.alt,
      onLoad: function onLoad() {
        return setImagesLoaded(true);
      },
      style: slideIndex === index ? {
        border: thumbnailBorder
      } : {
        border: inactiveThumbnailBorder
      },
      key: "thumbnail_" + index,
      onClick: function onClick() {
        thumbnailClick(index);
      }
    }));
  };
  var resetImage = function resetImage() {
    if (enableMagnifyingGlass) {
      initMagnifyingGlass();
    } else {
      if (zoomReferences.current[zoomIdx] != null) {
        zoomReferences.current[zoomIdx].resetTransform();
      }
    }
  };
  var getThumbnailImgSrc = function getThumbnailImgSrc(img, index) {
    if (isVideo(index) && img.thumbnail) {
      return img.thumbnail;
    } else {
      return img.src;
    }
  };
  var getThumbnailImgSrcNext = function getThumbnailImgSrcNext(img, index) {
    if (isVideo(index)) {
      return img.thumbnail;
    } else {
      var img_src = img.src;
      if (typeof img_src === 'object' && !Array.isArray(img_src) && img_src !== null) {
        return img_src.src;
      } else {
        return img_src;
      }
    }
  };
  var isAnimImageComponent = function isAnimImageComponent() {
    if (images) {
      if (images.length == 1) {
        return true;
      }
    }
    return false;
  };
  var initWrapperClassname = function initWrapperClassname() {
    var classNameStr = "";
    if (isAnimImageComponent()) {
      if (props.imgWrapperClassName) {
        classNameStr += props.imgWrapperClassName + " ";
      }
    } else if (props.className) {
      classNameStr += props.className + " ";
    }
    classNameStr += "" + styles.lightboxjs;
    return classNameStr;
  };
  var initStyling = function initStyling() {
    if (props.theme) {
      if (themes[props.theme]) {
        setBackgroundColor(themes[props.theme].background);
        setTextColor(themes[props.theme].textColor);
      }
    }
    if (props.fullScreen) {
      if (props.fullScreen == true) {
        setImgAnimation('fade');
        setIsRounded(false);
      }
    }
  };
  var imageSlideElement = function imageSlideElement(index) {
    var imageElem;
    if (!props.images) {
      imageElem = createElement("img", {
        className: "imageModal " + styles.embla__slide__img + "\n        " + (props.fullScreen ? styles.fullScreenLightboxImg : styles.lightbox_img) + " \n        " + (enableMagnifyingGlass ? styles.maxWidthFull : styles.maxWidthWithoutMagnifier) + " ",
        style: getImageStyle(),
        ref: imageRef,
        loading: 'lazy',
        src: images[index].original ? images[index].original : images[index].src,
        onLoad: function onLoad() {
          if (index == slideIndex) {
            setDisplayLoader(false);
          }
          if (props.images) {
            setItemLoaded(index);
          } else {
            setImagesItemLoaded(index);
          }
        },
        id: 'img'
      });
    } else if (props.images && props.render) {
      imageElem = props.render.imgSlide(props.images[index]);
    } else {
      var img_link;
      if (props.images) {
        if (typeof images[index].src === 'object' && !Array.isArray(images[index].src) && images[index].src !== null) {
          var _images$index$src;
          img_link = (_images$index$src = images[index].src) === null || _images$index$src === void 0 ? void 0 : _images$index$src.src;
        } else if (props.coverImageInLightbox == true) {
          img_link = images[index].src;
        } else {
          img_link = images[index].src;
        }
      }
      imageElem = createElement("img", {
        className: "imageModal " + styles.embla__slide__img + "\n        " + (props.fullScreen ? styles.fullScreenLightboxImg : styles.lightbox_img) + " \n        " + (enableMagnifyingGlass ? styles.maxWidthFull : styles.maxWidthWithoutMagnifier) + " ",
        ref: imageRef,
        loading: 'lazy',
        style: getImageStyle(),
        src: images[index].original ? images[index].original : img_link,
        onLoad: function onLoad() {
          if (index == slideIndex) {
            setDisplayLoader(false);
          }
          if (props.images) {
            setItemLoaded(index);
          } else {
            setImagesItemLoaded(index);
          }
        },
        id: 'img'
      });
    }
    return imageElem;
  };
  var isPanningDisabled = function isPanningDisabled() {
    if (isMobile && zoomedIn == false) {
      return true;
    }
    if (isMobile && zoomedIn) {
      return false;
    }
    return false;
  };
  var getLightboxElem = function getLightboxElem(index) {
    if (isVideo(index)) {
      return videoSlideElement(index);
    } else if (isPictureElement(index)) {
      var elem_metadata = props.images[index]["picture"];
      return createElement("picture", {
        className: "imageModal \n      " + (props.fullScreen ? styles.fullScreenLightboxImg : styles.lightbox_img) + " \n      " + (enableMagnifyingGlass ? styles.maxWidthFull : styles.maxWidthWithoutMagnifier) + " "
      }, Object.keys(elem_metadata).map(function (format) {
        return createElement("source", {
          type: format,
          key: format,
          srcSet: elem_metadata[format].srcSet
        });
      }), createElement("img", {
        src: elem_metadata['fallback']
      }));
    } else {
      if (images && props.render || frameworkID == 'next') {
        return imageSlideElement(index);
      } else {
        return createElement("img", {
          className: "imageModal " + styles.embla__slide__img + "\n          " + (props.fullScreen ? styles.fullScreenLightboxImg : styles.lightbox_img) + " \n          " + (enableMagnifyingGlass ? styles.maxWidthFull : styles.maxWidthWithoutMagnifier) + " ",
          ref: imageRef,
          key: index,
          loading: 'lazy',
          style: getImageStyle(),
          src: images && images[index].original ? images[index].original : images[index].src,
          onLoad: function onLoad() {
            if (index == slideIndex) {
              setDisplayLoader(false);
            }
            if (props.images) {
              setItemLoaded(index);
            } else {
              setImagesItemLoaded(index);
            }
          },
          id: 'img'
        });
      }
    }
  };
  var isVideo = function isVideo(index) {
    if (props.images) {
      var elem = props.images[index];
      if (elem) {
        if (elem.type == 'yt' || elem.type == 'htmlVideo') {
          return true;
        }
      }
    }
    return false;
  };
  var isPictureElement = function isPictureElement(index) {
    if (props.images) {
      var elem = props.images[index];
      if (elem) {
        if (elem.picture) {
          return true;
        }
      }
    }
    return false;
  };
  useEffect(function () {
    if (!emblaApi) return;
  }, [carouselReady, emblaApi]);
  var isHTMLVideo = function isHTMLVideo(index) {
    if (props.images) {
      if (props.images && props.images[index].type == 'htmlVideo') {
        return true;
      }
    }
    return false;
  };
  var videoSlideElement = function videoSlideElement(index) {
    var elem = props.images[index];
    var videoElem;
    if (elem.type == 'yt') {
      videoElem = createElement("div", {
        className: styles.videoOuterContainer + " imageModal"
      }, createElement(YouTube, {
        videoId: elem.videoID,
        ref: function ref(el) {
          return videoReferences.current[index] = el;
        },
        iframeClassName: "" + styles.ytVideo,
        title: 'YouTube video player',
        opts: {
          height: getVideoHeight(elem),
          width: getVideoWidth(elem),
          playerVars: {
            autoplay: shouldAutoplay(elem) ? 1 : 0
          }
        },
        onReady: function onReady(event) {
          var videoElems = videoElements;
          videoElems[index] = event;
          setVideoElements(videoElems);
          if (index == slideIndex) {
            setDisplayLoader(false);
          }
          setItemLoaded(index);
        },
        onPlay: function onPlay(event) {
          setYTVideoCurrentlyPlaying(true);
        },
        onPause: function onPause(event) {
          setYTVideoCurrentlyPlaying(false);
        },
        onEnd: function onEnd(event) {
          setYTVideoCurrentlyPlaying(false);
        },
        onError: function onError(event) {},
        onStateChange: function onStateChange(event) {},
        onPlaybackRateChange: function onPlaybackRateChange(event) {},
        onPlaybackQualityChange: function onPlaybackQualityChange(event) {}
      }));
    } else if (elem.type == 'htmlVideo') {
      videoElem = createElement("div", {
        className: styles.htmlVideo + " " + styles.htmlVideoOuterContainer + " imageModal"
      }, createElement("video", {
        className: styles.cursorPointer + " " + styles.lightboxVideo,
        width: getVideoWidth(elem),
        ref: function ref(el) {
          return videoReferences.current[index] = el;
        },
        onPlay: function onPlay() {},
        height: getVideoHeight(elem),
        autoPlay: index == imgSlideIndex ? shouldAutoplay(elem) : false,
        controls: true
      }, createElement("source", {
        src: elem.videoSrc,
        type: 'video/mp4',
        onLoad: function onLoad() {
          setItemLoaded(index);
        }
      })));
    }
    return videoElem;
  };
  var initZoom = function initZoom(ref) {
    if (ref.state.scale <= 1.65) {
      setZoomedIn(false);
    } else {
      setZoomedIn(true);
    }
  };
  var regularImgPaneNodes = Array.apply(null, Array(images.length)).map(function (_, index) {
    return createElement("div", {
      key: index
    }, enableMagnifyingGlass == true ? createElement(Magnifier, {
      src: images[index].src,
      className: styles.magnifyWrapper + " " + styles.lightbox_img,
      height: imgContainHeight,
      width: imgContainWidth,
      mgShowOverflow: false
    }) : createElement("div", {
      className: "" + styles.embla__slide
    }, createElement(TransformWrapper, {
      ref: function ref(el) {
        return zoomReferences.current[index] = el;
      },
      onWheel: function onWheel(ref, wheelEvent) {
        initZoom(ref);
      },
      disabled: disableZoom,
      panning: {
        disabled: isPanningDisabled()
      },
      key: index,
      onZoom: function onZoom(ref, event) {
        initZoom(ref);
      },
      onZoomStop: function onZoomStop(ref, event) {
        initZoom(ref);
      },
      onTransformed: function onTransformed(ref, event) {
        initZoom(ref);
      },
      onPinchingStop: function onPinchingStop(ref, event) {
        initZoom(ref);
      },
      centerZoomedOut: true,
      initialScale: 1,
      alignmentAnimation: {
        sizeX: 0,
        sizeY: 0
      }
    }, createElement(TransformComponent, {
      wrapperStyle: {
        maxWidth: '100vw',
        height: '100vh',
        margin: 'auto'
      },
      contentStyle: props.fullScreen ? {
        maxWidth: '100vw',
        height: '100vh',
        marginLeft: 'auto',
        marginRight: 'auto'
      } : {
        maxWidth: '100vw',
        height: '100vh',
        margin: 'auto',
        display: 'grid'
      },
      key: index
    }, createElement("div", {
      className: (props.fullScreen ? styles.slideshow_img_fullscreen : styles.slideshow_img) + " " + (props.lightboxImgClass ? props.lightboxImgClass : "")
    }, getLightboxElem(index))))));
  });
  var initMagnifyingGlass = function initMagnifyingGlass() {
    if (!enableMagnifyingGlass) {
      initImageDimensions();
    } else {
      setImgAnimation('imgDrag');
    }
    setMagnifyingGlass(!enableMagnifyingGlass);
  };
  var initImageDimensions = function initImageDimensions() {
    var img;
    if (imgSlideIndex == 0 || imgSlideIndex % images.length == 0) {
      img = document.getElementById('img');
    } else {
      img = imageRef.current;
    }
    var ratio = img.naturalWidth / img.naturalHeight;
    var width = img.height * ratio;
    var height = img.height;
    if (width > img.width) {
      width = img.width;
      height = img.width / ratio;
    }
    setImgContainHeight(height);
    setImgContainWidth(width);
  };
  var initFullScreenChangeEventListeners = function initFullScreenChangeEventListeners() {
    document.addEventListener('fullscreenchange', exitFullScreenHandler);
    document.addEventListener('webkitfullscreenchange', exitFullScreenHandler);
    document.addEventListener('MSFullscreenChange', exitFullScreenHandler);
    document.addEventListener('mozfullscreenchange', exitFullScreenHandler);
  };
  var removeFullScreenChangeEventListeners = function removeFullScreenChangeEventListeners() {
    document.removeEventListener('fullscreenchange', exitFullScreenHandler);
    document.removeEventListener('webkitfullscreenchange', exitFullScreenHandler);
    document.removeEventListener('MSFullscreenChange', exitFullScreenHandler);
    document.removeEventListener('mozfullscreenchange', exitFullScreenHandler);
  };
  var initEventListeners = function initEventListeners() {
    if (isBrowser()) {
      window.addEventListener('resize', handleWindowResize);
    }
  };
  var removeEventListeners = function removeEventListeners() {
    removeOnSelectListener();
    if (isBrowser()) {
      window.removeEventListener('resize', handleWindowResize);
    }
  };
  var setReducedMotion = function setReducedMotion(mediaQuery) {
    if (mediaQuery.matches) {
      setImgAnimation('fade');
    }
  };
  var checkAndInitReducedMotion = function checkAndInitReducedMotion() {
    var reducedMotionMediaQuery = '';
    if (isBrowser()) {
      reducedMotionMediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
      if (!reducedMotionMediaQuery || reducedMotionMediaQuery.matches) {
        setImgAnimation('fade');
      }
      reducedMotionMediaQuery.addEventListener('change', setReducedMotion(reducedMotionMediaQuery));
    }
    return reducedMotionMediaQuery;
  };
  var initPropsForControlIcons = function initPropsForControlIcons() {
    if (props.showFullScreenIcon != undefined) {
      setDisplayFullScreenIcon(props.showFullScreenIcon);
    }
    if (props.showThumbnailIcon != undefined) {
      setDisplayThumbnailIcon(props.showThumbnailIcon);
    }
    if (props.showSlideshowIcon != undefined) {
      setDisplaySlideshowIcon(props.showSlideshowIcon);
    }
    if (props.showMagnificationIcons != undefined) {
      setDisplayMagnificationIcons(props.showMagnificationIcons);
    }
  };
  var initProps = function initProps() {
    if (props.showControls != undefined) {
      setShowControls(props.showControls);
      if (props.showControls == false) {
        setDisplayMagnificationIcons(false);
      }
    }
    initPropsForControlIcons();
    if (props.disableImageZoom) {
      setDisableZoom(props.disableImageZoom);
    }
    if (isBrowser()) {
      setWidth(window.innerWidth);
    }
    if (window.innerWidth <= mobileWidth) {
      setImgAnimation('fade');
    }
  };
  useInterval(function () {
    if (isRTL) {
      updateImageSlideshow(-1);
    } else {
      updateImageSlideshow(1);
    }
  }, isSlideshowPlaying ? slideshowInterval : null);
  var openFullScreen = function openFullScreen(lightbox_elem) {
    if (lightbox_elem.requestFullscreen) {
      lightbox_elem.requestFullscreen();
    } else if (lightbox_elem.webkitRequestFullscreen) {
      lightbox_elem.webkitRequestFullscreen();
    } else if (lightbox_elem.msRequestFullscreen) {
      lightbox_elem.msRequestFullscreen();
    }
  };
  var closeFullScreen = function closeFullScreen(document) {
    if (document.exitFullscreen) {
      document.exitFullscreen();
    } else if (document.webkitExitFullscreen) {
      document.webkitExitFullscreen();
    } else if (document.msExitFullscreen) {
      document.msExitFullscreen();
    }
  };
  var isBrowser = function isBrowser() {
    return typeof window !== "undefined";
  };
  var initRTLImages = function initRTLImages() {
    var imagesMetadataCopy = props.images;
    imagesMetadataCopy.reverse();
    setImages(imagesMetadataCopy);
    if (images.length > 0) {
      var imagesRTLCopy = images;
      imagesRTLCopy.reverse();
      setImages(imagesRTLCopy);
    }
  };
  var initImages = function initImages(isMounted, updateImages) {
    if (coverMode && props.images) {
      if (props.coverImageInLightbox == false) {
        var filterImages = props.images.filter(function (img) {
          return img.cover != true;
        });
        setImages(filterImages);
      } else {
        setImages(props.images);
      }
    }
    if (updateImages || !isInit) {
      if (lightboxIdentifier && props.children) {
        var img_gallery = document.querySelectorAll("[data-lightboxjs=" + lightboxIdentifier + "]");
        var originalImageAttr = false;
        var img_elements = [];
        if (img_gallery.length > 0) {
          var _loop = function _loop(i) {
            var img = img_gallery[i];
            var attr_val = img.getAttribute('data-lightboxjs');
            if (attr_val == lightboxIdentifier) {
              img.addEventListener('click', function () {
                var index;
                if (isRTL) {
                  index = getRTLIndex(img_gallery.length, i);
                } else {
                  index = i;
                }
                var reactSwipeOptionConfig = reactSwipeOptions;
                reactSwipeOptionConfig.startIndex = index;
                if (isMounted) setReactSwipeOptions(reactSwipeOptionConfig);
                setZoomIdx(index);
                openModal(index);
              }, false);
              img.classList.add('cursor-pointer');
              var original_img_src = img.getAttribute('data-lightboxjs-original');
              if (original_img_src) {
                img_elements.push({
                  src: original_img_src,
                  alt: img.alt,
                  loaded: false
                });
                originalImageAttr = true;
              } else if (img.src) {
                img_elements.push({
                  src: img.src,
                  alt: img.alt,
                  loaded: false
                });
              } else if (img.tagName == 'DIV') {
                var corresponding_img_item = props.images[i];
                var img_src = corresponding_img_item.src;
                var img_alt = corresponding_img_item.alt;
                img_elements.push({
                  src: img_src,
                  alt: img_alt,
                  loaded: false
                });
              }
            }
          };
          for (var i = 0; i <= img_gallery.length - 1; i++) {
            _loop(i);
          }
          if (isMounted && !coverMode) {
            if (originalImageAttr) {
              setImages(img_elements);
            } else if (props.showAllImages != true && props.framework != "next") {
              setImages(img_elements);
            } else if (props.framework == "next" && !originalImageAttr) {
              setImages(props.images);
            } else {
              setImages(props.images);
            }
          }
        } else {
          if (props.images) {
            setImages(props.images);
          }
        }
      } else if (lightboxIdentifier && props.images && !props.children) {
        setImages(props.images);
      } else if (!lightboxIdentifier && props.images && !props.children) {
        setImages(props.images);
      } else if (!props.render) {
        var imgArray = [];
        if (!Array.isArray(props.children)) {
          imgArray.push(props.children);
        } else {
          imgArray = props.children;
        }
        var imgs = [];
        for (var k = 0; k < imgArray.length; k++) {
          var img_elem = imgArray[k];
          var img_obj = {
            src: img_elem.props.src,
            alt: img_elem.props.alt,
            loaded: false
          };
          imgs.push(img_obj);
        }
        if (isRTL) {
          imgs.reverse();
        }
        if (isMounted) setImages(imgs);
        setPreviewImageElems(imgArray);
      } else {
        if (isMounted) {
          setImages(props.images);
        }
      }
      if (isMounted) setIsInit(true);
    }
  };
  var dispatchSlideSelectEvents = function dispatchSlideSelectEvents(newIndex, prevIndex) {
    if (newIndex == 0 && prevIndex == images.length - 1) {
      dispatchNextImgEvent(newIndex);
    } else if (newIndex == images.length - 1 && prevIndex == 0) {
      dispatchPrevImgEvent(newIndex);
    } else if (newIndex > prevIndex) {
      dispatchNextImgEvent(newIndex);
    } else if (newIndex < prevIndex) {
      dispatchPrevImgEvent(newIndex);
    }
  };
  var onSelect = useCallback(function () {
    if (!emblaApi) return;
    var newSlideIndex = emblaApi.selectedScrollSnap();
    var prevSlideIndex = emblaApi.previousScrollSnap();
    if (newSlideIndex != prevSlideIndex) {
      initSlide(newSlideIndex);
      resetMedia(prevSlideIndex);
      dispatchSlideSelectEvents(newSlideIndex, prevSlideIndex);
    }
    if (emblaThumbsApi) {
      emblaThumbsApi.scrollTo(emblaApi.selectedScrollSnap());
    }
  }, [emblaApi, emblaThumbsApi]);
  var onReinit = useCallback(function () {
    if (!emblaApi) return;
    setEmblaReinitialized(true);
  }, [emblaApi, emblaReinitialized]);
  var handleResize = function handleResize(entry) {
    emblaApi === null || emblaApi === void 0 ? void 0 : emblaApi.reInit();
  };
  var rootNode = (emblaApi === null || emblaApi === void 0 ? void 0 : emblaApi.rootNode()) || null;
  useResizeObserver(rootNode, handleResize);
  var removeOnSelectListener = useCallback(function () {
    if (emblaApi) emblaApi.off('select', onSelect);
  }, [emblaApi, onSelect]);
  useEffect(function () {
    if (emblaApi) {
      if (zoomedIn) {
        emblaApi.reInit({
          draggable: false
        });
      } else {
        emblaApi.reInit({
          draggable: true
        });
      }
    }
  }, [zoomedIn]);
  useEffect(function () {
    if (!emblaApi) return;
    if (showModal) emblaApi.reInit();
  }, [showModal, emblaApi]);
  useEffect(function () {
    if (emblaApi) emblaApi.on('select', onSelect);
  }, [emblaApi, onSelect]);
  useEffect(function () {
    if (emblaApi) emblaApi.on('reInit', onReinit);
  }, [emblaApi, onReinit]);
  useEffect(function () {
    initStyling();
    if (props.iconColor) {
      setIconColor(props.iconColor);
    }
    if (props.backgroundColor) {
      setBackgroundColor(props.backgroundColor);
    }
  }, [props.theme, props.iconColor, props.backgroundColor]);
  useEffect(function () {
    initImages(true, true);
  }, [props.images, props.displayedImages]);
  useEffect(function () {
    var slideNum = 0;
    if (props.open) {
      if (props.startingSlideIndex) {
        if (props.startingSlideIndex < images.length && props.startingSlideIndex >= 0) {
          slideNum = props.startingSlideIndex;
        } else {
          slideNum = 0;
        }
      }
      openModalWithSlideNum(slideNum);
    } else if (props.open == false) {
      closeModal();
    }
  }, [props.open]);
  useEffect(function () {
    if (isOpen == true) {
      dispatchOpenEvent();
    } else {
      dispatchCloseEvent();
    }
  }, [isOpen]);
  useEffect(function () {
    if (props.render) {
      if (!props.images) {
        console.error('Array of images must be passed to `SlideshowLightbox` (with the `images` prop) if using custom render method. ');
      }
    }
    var isMounted = true;
    if (isMounted) initProps();
    if (coverMode && props.images) {
      if (props.coverImageInLightbox == false) {
        var filterImages = props.images.filter(function (img) {
          return img.cover != true;
        });
        setImages(filterImages);
      } else {
        setImages(props.images);
      }
    }
    if (isMounted) {
      initEventListeners();
    }
    var reducedMotionMediaQuery = checkAndInitReducedMotion();
    if (!isInit) {
      initImages(isMounted, false);
      if (props.images && isRTL == true) {
        initRTLImages();
      }
    }
    if (isMounted) initStyling();
    return function () {
      isMounted = false;
      removeEventListeners();
      reducedMotionMediaQuery.removeEventListener('change', reducedMotionMediaQuery);
    };
  }, []);
  return createElement("div", null, createElement("div", {
    className: "" + initWrapperClassname()
  }, props.images && props.children && lightboxIdentifier == false ? props.children : null, props.images && lightboxIdentifier == false ? props.images.map(function (elem, index) {
    return createElement("img", {
      className: (props.imgClassName ? props.imgClassName : '') + " " + styles.cursorPointer,
      src: !isVideo(index) ? elem.src : elem.thumbnail,
      onClick: function onClick() {
        var img_index;
        if (isRTL) {
          img_index = getRTLIndex(props.images.length, index);
        } else {
          img_index = index;
        }
        openModalWithSlideNum(img_index);
      },
      key: index
    });
  }) : null, lightboxIdentifier != false && props.children && coverMode == false ? props.children : null, lightboxIdentifier == false && props.images || coverMode == true ? null : previewImageElems.filter(function (elem) {
    return elem.type == 'img';
  }).map(function (elem, index) {
    return createElement("img", Object.assign({}, elem.props, {
      className: (elem.props.className ? elem.props.className : '') + " " + styles.cursorPointer,
      onClick: function onClick() {
        var img_index;
        if (isRTL) {
          img_index = getRTLIndex(previewImageElems.length, index);
        } else {
          img_index = index;
        }
        openModalWithSlideNum(img_index);
      },
      key: index
    }));
  }), coverMode ? props.children : false, createElement(AnimateSharedLayout, {
    type: 'crossfade'
  }, createElement(AnimatePresence, {
    initial: false,
    exitBeforeEnter: true
  }, showModal !== false && createElement(Portal, null, createElement(Div100vh, null, createElement(motion.div, {
    className: "" + styles.slideshowAnimContainer,
    key: 'slideshowAnimContainer',
    id: 'slideshowAnim',
    style: {
      backgroundColor: backgroundColor
    },
    initial: "inactive",
    variants: variants,
    animate: showModal ? "active" : "inactive",
    exit: "inactive",
    transition: {
      duration: "0.3"
    },
    onAnimationComplete: function onAnimationComplete() {
      var animEntered = !animationEntered;
      setAnimationEntered(animEntered);
      if (animEntered == true) {
        var _document$getElementB;
        var prevFocusedElement = document.activeElement;
        setPrevFocusedElem(prevFocusedElement);
        (_document$getElementB = document.getElementById("lightboxContainer")) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.focus();
      } else {
        prevFocusedElem === null || prevFocusedElem === void 0 ? void 0 : prevFocusedElem.focus();
      }
    }
  }, createElement("div", {
    className: "" + styles.lightboxContainer,
    id: "lightboxContainer",
    tabIndex: -1,
    role: "dialog",
    onClick: function onClick(e) {
      if (modalCloseOption == "clickOutside") {
        checkModalClick(e);
      }
    }
  }, createElement("section", {
    className: styles.iconsHeader + " " + (iconColor ? '' : getIconStyle()) + " imageModal",
    style: {
      color: iconColor
    }
  }, createElement(KeyHandler, {
    keyValue: 'ArrowLeft',
    code: '37',
    onKeyHandle: function onKeyHandle() {
      prevSlide();
    }
  }), createElement(KeyHandler, {
    keyValue: 'ArrowRight',
    code: '39',
    onKeyHandle: function onKeyHandle() {
      nextSlide();
    }
  }), createElement(KeyHandler, {
    keyValue: 'Escape',
    code: '27',
    onKeyHandle: function onKeyHandle(event) {
      event.preventDefault();
      event.stopPropagation();
      if (!isBrowserFullScreen) {
        closeModal();
      }
    }
  }), createElement(KeyHandler, {
    keyValue: 'Left',
    code: '37',
    onKeyHandle: function onKeyHandle() {
      prevSlide();
    }
  }), createElement(KeyHandler, {
    keyValue: 'Right',
    code: '39',
    onKeyHandle: function onKeyHandle() {
      nextSlide();
    }
  }), createElement(KeyHandler, {
    keyValue: 'Esc',
    code: '27',
    onKeyHandle: function onKeyHandle(event) {
      event.preventDefault();
      event.stopPropagation();
      if (!isBrowserFullScreen) {
        closeModal();
      }
    }
  }), showControls == true && createElement("div", {
    className: "" + styles.controls
  }, disableZoom || displayMagnificationIcons == false ? null : createElement(motion.div, null, createElement("button", {
    onClick: function onClick() {
      if (enableMagnifyingGlass) {
        initMagnifyingGlass();
      }
      if (zoomReferences.current[zoomIdx] != null) {
        zoomReferences.current[zoomIdx].zoomIn();
      }
      setZoomedIn(true);
    }
  }, createElement(ZoomIn, {
    size: 24,
    color: iconColor ? iconColor : undefined,
    className: styles.lightboxjs_icon + " " + (iconColor ? '' : getIconStyle()),
    style: iconColor ? {
      color: iconColor
    } : {}
  }))), disableZoom || displayMagnificationIcons == false ? null : createElement(motion.div, null, createElement("button", {
    onClick: function onClick() {
      zoomReferences.current[zoomIdx].zoomOut();
      var scale = zoomReferences.current[zoomIdx].state.scale;
      if (scale == 1 || scale == 1.65) {
        setZoomedIn(false);
      }
    }
  }, createElement(ZoomOut, {
    size: 24,
    className: styles.lightboxjs_icon + " " + (iconColor ? '' : getIconStyle()),
    style: iconColor ? {
      color: iconColor
    } : {},
    color: iconColor ? iconColor : undefined
  }))), displayDownloadBtn() ? createElement("button", {
    onClick: function onClick() {
      saveImage();
    }
  }, createElement(Download, {
    size: 24,
    className: styles.lightboxjs_icon + " " + (iconColor ? '' : getIconStyle()),
    style: iconColor ? {
      color: iconColor
    } : {},
    color: iconColor ? iconColor : undefined
  })) : null, displayFullScreenIcon ? isBrowserFullScreen ? createElement(motion.div, null, createElement("button", {
    onClick: function onClick() {
      isBrowserFullScreen ? exitFullScreen() : fullScreen();
    }
  }, createElement(FullscreenExit, {
    size: 24,
    className: styles.lightboxjs_icon + " " + (iconColor ? '' : getIconStyle()),
    style: iconColor ? {
      color: iconColor
    } : {},
    color: iconColor ? iconColor : undefined
  }))) : createElement(motion.div, null, createElement("button", {
    onClick: function onClick() {
      isBrowserFullScreen ? exitFullScreen() : fullScreen();
    }
  }, createElement(Fullscreen, {
    size: 24,
    className: styles.lightboxjs_icon + " " + (iconColor ? '' : getIconStyle()),
    style: iconColor ? {
      color: iconColor
    } : {},
    color: iconColor ? iconColor : undefined
  }))) : null, displayThumbnailIcon ? createElement(motion.div, null, createElement("button", {
    onClick: function onClick() {
      setShowThumbnails(!showThumbnails);
    }
  }, createElement(GridFill, {
    size: 24,
    className: styles.lightboxjs_icon + " " + (iconColor ? '' : getIconStyle()),
    style: iconColor ? {
      color: iconColor
    } : {},
    color: iconColor ? iconColor : undefined
  }))) : null, shouldDisplayMagnifyingGlassIcon() ? createElement(motion.div, null, createElement("button", {
    onClick: function onClick() {
      return initMagnifyingGlass();
    }
  }, createElement(Search, {
    size: 24,
    className: styles.lightboxjs_icon + " " + (iconColor ? '' : getIconStyle()),
    style: iconColor ? {
      color: iconColor
    } : {},
    color: iconColor ? iconColor : undefined
  }))) : null, shouldDisplaySlideshowIcon() ? createElement(motion.div, {
    className: styles.slideshowPlayBtn
  }, isSlideshowPlaying ? createElement("button", {
    onClick: function onClick() {
      isSlideshowPlaying ? stopSlideshow() : playSlideshow();
    }
  }, createElement(PauseCircleFill, {
    size: 24,
    className: styles.lightboxjs_icon + " " + (iconColor ? '' : getIconStyle()),
    style: iconColor ? {
      color: iconColor
    } : {},
    color: iconColor ? iconColor : undefined
  })) : createElement("button", {
    onClick: function onClick() {
      isSlideshowPlaying ? stopSlideshow() : playSlideshow();
    }
  }, createElement(PlayCircleFill, {
    size: 24,
    className: styles.lightboxjs_icon + " " + (iconColor ? '' : getIconStyle()),
    style: iconColor ? {
      color: iconColor
    } : {},
    color: iconColor ? iconColor : undefined
  }))) : null), createElement(motion.div, {
    className: styles.closeIcon + " " + (props.showControls == false ? styles.mlAuto : "")
  }, createElement("button", {
    id: "closeBtn",
    className: styles.closeButton,
    onClick: function onClick() {
      closeModal();
    }
  }, createElement(XLg, {
    id: "closeIcon",
    size: 24,
    className: styles.lightboxjs_icon + " " + (iconColor ? '' : getIconStyle()),
    color: iconColor ? iconColor : undefined,
    style: iconColor ? {
      color: iconColor
    } : {}
  })))), displayArrows() ? createElement("div", null, createElement("div", {
    className: rightArrowStyle ? styles.next1 + " " + getArrowStyle() + " imageModal" : "imageModal",
    style: rightArrowStyle,
    onClick: function onClick() {
      nextSlide();
    }
  }, nextArrowElem ? nextArrowElem : createElement("span", {
    className: "" + (props.rightArrowClassname ? props.rightArrowClassname : "")
  }, "\u276F")), createElement("div", {
    className: leftArrowStyle ? styles.prev1 + " " + getArrowStyle() + " imageModal" : "imageModal",
    style: leftArrowStyle,
    onClick: function onClick() {
      prevSlide();
    }
  }, prevArrowElem ? prevArrowElem : createElement("span", {
    className: "" + (props.leftArrowClassname ? props.leftArrowClassname : "")
  }, "\u276E"))) : null, createElement(AnimatePresence, {
    initial: false,
    custom: direction
  }, createElement("div", {
    className: (showThumbnails ? styles.slideshowInnerContainerThumbnails : '') + " " + styles.embla + " " + (isImageCaption() ? styles.slideImageAndCaption : '') + " \n                          " + (props.fullScreen ? styles.slideshowInnerContainerFullScreen : styles.slideshowInnerContainer) + "  "
  }, createElement("div", {
    className: styles.embla__viewport,
    ref: showModal ? emblaRef : null
  }, createElement("div", {
    className: styles.embla__container
  }, regularImgPaneNodes))), displayLoader == true && !isHTMLVideo(slideIndex) ? createElement("span", {
    key: 'loader',
    className: styles.loader + " " + getLoaderThemeClass()
  }) : null), createElement("div", {
    className: styles.thumbnailsOuterContainer + " " + (isImageCaption() ? styles.thumbnailsAndCaption : ''),
    style: isImageCaption() ? {
      backgroundColor: backgroundColor
    } : {}
  }, isImageCaption() ? createElement("div", {
    className: styles.imgTitleContainer + " imageModal"
  }, createElement("p", {
    className: "" + styles.imgTitle,
    key: 'imgCaption' + slideIndex,
    style: props.captionStyle ? props.captionStyle : {
      color: textColor
    }
  }, getImageCaption())) : null, createElement(AnimatePresence, {
    initial: animatedThumbnails
  }, showThumbnails !== false && createElement(motion.div, {
    initial: 'hidden',
    exit: 'hidden',
    animate: 'visible',
    style: imagesLoaded ? {} : {
      display: 'displayHidden'
    },
    transition: {
      type: 'spring',
      duration: 0.75
    },
    variants: thumbnailVariants,
    className: styles.thumbnails + " " + (isImageCaption() ? styles.thumbnailsWithCaption : '')
  }, createElement("div", {
    className: styles.embla_thumbs + " " + styles.thumbnails
  }, createElement("div", {
    className: styles.embla_thumbs__viewport,
    ref: emblaThumbsRef
  }, createElement("div", {
    className: styles.embla_thumbs__container
  }, frameworkID == 'next' && props.images ? props.images.map(function (img, index) {
    return getImageThumbnail(img, index, true);
  }) : images.map(function (img, index) {
    return getImageThumbnail(img, index, false);
  })))))))))))))));
});

var themes$1 = {
  day: {
    background: 'white',
    iconColor: 'black',
    thumbnailBorder: 'solid transparent 2px',
    textColor: 'black'
  },
  night: {
    background: '#151515',
    iconColor: 'silver',
    thumbnailBorder: 'solid rgb(107, 133, 206)  2px',
    textColor: 'silver'
  },
  lightbox: {
    background: 'rgba(12, 12, 12, 0.93)',
    iconColor: 'silver',
    thumbnailBorder: 'solid rgb(107, 133, 206) 2px',
    textColor: 'silver'
  }
};
var defaultTheme$1 = "lightbox";
var AnimImage = function AnimImage(props) {
  var _useState = useState(props.backgroundColor ? props.backgroundColor : themes$1[defaultTheme$1].background),
    backgroundColor = _useState[0],
    setBackgroundColor = _useState[1];
  var _useState2 = useState(props.iconColor ? props.iconColor : themes$1[defaultTheme$1].iconColor),
    iconColor = _useState2[0],
    setIconColor = _useState2[1];
  var _useState3 = useState(props.fullScreen ? props.fullScreen : false),
    fullScreen = _useState3[0];
  var _useState4 = useState(props.modalClose ? props.modalClose : "default"),
    modalCloseOption = _useState4[0];
  var _useState5 = useState(props.disableImageZoom ? props.disableImageZoom : false),
    disableZoom = _useState5[0],
    setDisableZoom = _useState5[1];
  var _useState6 = useState(props.roundedImages ? props.roundedImages : false),
    imageRoundedBorder = _useState6[0];
  var _useState7 = useState(props.showFullScreenIcon ? props.showFullScreenIcon : true),
    displayFullScreenIcon = _useState7[0];
  var _useState8 = useState(props.className ? props.className : ""),
    className = _useState8[0];
  var _useState9 = useState(props.wrapperClassName ? props.wrapperClassName : ""),
    imgWrapperClass = _useState9[0];
  var _useState10 = useState(props.lightboxImgClass ? props.lightboxImgClass : ""),
    lightboxImgClassName = _useState10[0];
  var _useState11 = useState(props.className ? props.className : ""),
    imgClass = _useState11[0];
  var _useState12 = useState(props.showMagnificationIcons ? props.showMagnificationIcons : true),
    displayMagnificationIcons = _useState12[0],
    setDisplayMagnificationIcons = _useState12[1];
  var _useState13 = useState(props.showControls ? props.showControls : true),
    displayControls = _useState13[0],
    setDisplayControls = _useState13[1];
  var _useState14 = useState(props.downloadImages ? props.downloadImages : false),
    showDownloadBtn = _useState14[0];
  var _useState15 = useState(props.rtl ? props.rtl : false);
  var _useState16 = useState(props.lightboxIdentifier ? props.lightboxIdentifier : false),
    lightboxIdentifier = _useState16[0];
  var _useState17 = useState(props.framework ? props.framework : ''),
    frameworkID = _useState17[0];
  var _useState18 = useState([]),
    images = _useState18[0],
    setImages = _useState18[1];
  var _React$useState = React__default.useState(),
    state = _React$useState[0];
  var initProps = function initProps() {
    if (props.showControls != undefined) {
      setDisplayControls(props.showControls);
      setDisableZoom(props.showControls);
      if (props.showControls == false) {
        setDisplayMagnificationIcons(false);
      }
    }
  };
  useEffect(function () {
    if (props.theme) {
      if (themes$1[props.theme]) {
        setBackgroundColor(themes$1[props.theme].background);
        setIconColor(themes$1[props.theme].iconColor);
      }
    }
    if (props.image && images.length == 0 && frameworkID == "next") {
      var imgs = [];
      imgs.push(props.image);
      setImages(imgs);
    } else {
      setImages(null);
    }
    return function () {};
  }, [state]);
  var getImage = function getImage() {
    if (frameworkID == "next" && props.children != undefined) {
      return props.children;
    } else if (frameworkID != "next") {
      return React__default.createElement("img", {
        src: props.image.src,
        alt: props.image.title,
        className: "" + className
      });
    }
  };
  useEffect(function () {
    var isMounted = true;
    if (isMounted) initProps();
    return function () {
      isMounted = false;
    };
  }, []);
  return React__default.createElement(SlideshowLightbox, {
    showSlideshowIcon: false,
    showThumbnails: false,
    backgroundColor: backgroundColor,
    iconColor: iconColor,
    theme: props.theme,
    lightboxIdentifier: lightboxIdentifier,
    fullScreen: fullScreen,
    showMagnificationIcons: displayMagnificationIcons,
    showFullScreenIcon: displayFullScreenIcon,
    downloadImages: showDownloadBtn,
    roundedImages: imageRoundedBorder,
    disableImageZoom: disableZoom,
    showArrows: false,
    showThumbnailIcon: false,
    showControls: displayControls,
    modalClose: modalCloseOption,
    lightboxImgClass: lightboxImgClassName,
    imgClassName: imgClass,
    imageComponent: true,
    framework: frameworkID,
    imgWrapperClassName: imgWrapperClass,
    images: images
  }, getImage());
};

var initLightboxJS = function initLightboxJS(licenseKey, plan_type) {
  var body = {
    license_key: licenseKey,
    plan_type: plan_type
  };
  axios.post('https://lightboxjs-server.herokuapp.com/license', body).then(function (response) {
    var licenseKeyValid = response.data.license_valid;
    if (!licenseKeyValid) {
      console.warn("Lightbox.js: Invalid license key specified, a valid license key must be provided.");
    }
  })["catch"](function (error) {
    console.log(error);
  });
};

export { AnimImage as Image, SlideshowLightbox, initLightboxJS };
//# sourceMappingURL=index.modern.js.map
