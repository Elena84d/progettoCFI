{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elena\\\\Downloads\\\\mern\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport Head from \"./components/Head\";\nimport Preloader from \"./components/Preloader\";\nimport BodyIndex from \"./components/BodyIndex\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isLoaded, setIsLoaded] = useState(false);\n  useEffect(() => {\n    // Simula un caricamento asincrono (puoi sostituire questo con la tua logica effettiva)\n    const fakeAsyncLoad = async () => {\n      try {\n        // Simula un ritardo di 2 secondi prima di considerare il caricamento completato\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        setIsLoaded(true); // Imposta lo stato su \"caricato\" dopo il ritardo\n      } catch (error) {\n        console.error(\"Errore nel caricamento:\", error);\n      }\n    };\n    fakeAsyncLoad();\n  }, []); // L'hook useEffect viene eseguito solo una volta all'avvio dell'app\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Head, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), \" \", isLoaded ? /*#__PURE__*/_jsxDEV(Routes, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(BodyIndex, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"e/1lVN3R6kIvuSIAmUIHNmZXQsc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Route","Routes","Head","Preloader","BodyIndex","jsxDEV","_jsxDEV","App","_s","isLoaded","setIsLoaded","fakeAsyncLoad","Promise","resolve","setTimeout","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","$RefreshReg$"],"sources":["C:/Users/elena/Downloads/mern/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport Head from \"./components/Head\";\nimport Preloader from \"./components/Preloader\";\nimport BodyIndex from \"./components/BodyIndex\";\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    // Simula un caricamento asincrono (puoi sostituire questo con la tua logica effettiva)\n    const fakeAsyncLoad = async () => {\n      try {\n        // Simula un ritardo di 2 secondi prima di considerare il caricamento completato\n        await new Promise((resolve) => setTimeout(resolve, 2000));\n        setIsLoaded(true); // Imposta lo stato su \"caricato\" dopo il ritardo\n      } catch (error) {\n        console.error(\"Errore nel caricamento:\", error);\n      }\n    };\n\n    fakeAsyncLoad();\n  }, []); // L'hook useEffect viene eseguito solo una volta all'avvio dell'app\n\n  return (\n    <Router>\n      <div>\n        <Head /> {/* Includi il tuo Head qui */}\n        {isLoaded ? (\n          <Routes>\n            {/* Definisci le tue rotte qui */}\n            <Route path=\"/\" element={<BodyIndex />} />\n            {/* Aggiungi altre rotte qui */}\n          </Routes>\n        ) : (\n          <Preloader />\n        )}\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,QAAQ,kBAAkB;AACzE,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,SAAS,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAE/CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMc,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF;QACA,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;QACzDH,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;MACrB,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAEDJ,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA,CAACP,MAAM;IAAAkB,QAAA,eACLX,OAAA;MAAAW,QAAA,gBACEX,OAAA,CAACJ,IAAI;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,KAAC,EACRZ,QAAQ,gBACPH,OAAA,CAACL,MAAM;QAAAgB,QAAA,eAELX,OAAA,CAACN,KAAK;UAACsB,IAAI,EAAC,GAAG;UAACC,OAAO,eAAEjB,OAAA,CAACF,SAAS;YAAAc,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEpC,CAAC,gBAETf,OAAA,CAACH,SAAS;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CACb;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEb;AAACb,EAAA,CAlCQD,GAAG;AAAAiB,EAAA,GAAHjB,GAAG;AAoCZ,eAAeA,GAAG;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}